>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> # Test area()
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[Exception] area() is not implemented

>>> # Test integer_validator
>>> bg.integer_validator("age", 4)  # Valide

>>> try:
...     bg.integer_validator("age", 0)  # Zero
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("age", -4)  # NÃ©gatif
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[ValueError] age must be greater than 0

>>> try:
...     bg.integer_validator("age", (4,))  # Tuple
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", [3])  # Liste
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", True)  # BoolÃ©en
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", {3, 4})  # Set
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[TypeError] age must be an integer

>>> try:
...     bg.integer_validator("age", None)  # None
... except Exception as e:
...     print("[{}] {}".format(type(e).__name__, e))
[TypeError] age must be an integer

>>> bg.integer_validator("width", 10)
>>> bg.integer_validator("height", 20)
>>> bg.integer_validator("distance", 100)
>>> bg.integer_validator("large", 1000000)
>>> bg.integer_validator("min", 1)